from setuptools import find_packages, setup

with open("README.md", "r", encoding="utf-8") as readme_file:
    _long_description = readme_file.read()

setup(
    name="extraction_methods",
    version="1.0.2",
    description="Methods to enable the extraction of metadata.",
    author="Rhys Evans",
    url="https://github.com/cedadev/extraction-methods/",
    long_description=_long_description,
    long_description_content_type="text/markdown",
    license="BSD - See extraction_methods/LICENSE file for details",
    packages=find_packages(),
    test_suite="tests",
    package_data={"extraction_methods": ["LICENSE"]},
    install_requires=["pyyaml", "ceda-directory-tree", "tqdm", "pydantic"],
    extras_require={
        "docs": [
            "sphinx",
            "sphinx-rtd-theme",
            "elasticsearch",
            "sphinxcontrib-programoutput",
        ],
        "elasticsearch": ["elasticsearch"],
        "intake-esm": ["intake-esm"],
        "rabbitmq": ["pika"],
        "thredds": ["siphon"],
    },
    python_requires=">=3.7",
    tests_require=["pytest"],
    entry_points={
        "extraction_methods": [
            "regex = extraction_methods.plugins.extraction_methods.regex:RegexExtract",
            "regex_assets = extraction_methods.plugins.extraction_methods.regex_assets:RegexAssetsExtract",
            "default = extraction_methods.plugins.extraction_methods.default:DefaultExtract",
            "categories = extraction_methods.plugins.extraction_methods.categories:CategoriesExtract",
            "header = extraction_methods.plugins.extraction_methods.header.header:HeaderExtract",
            "iso19115 = extraction_methods.plugins.extraction_methods.iso19115:ISO19115Extract",
            "xml = extraction_methods.plugins.extraction_methods.xml:XMLExtract",
            "elasticsearch = extraction_methods.plugins.extraction_methods.elasticsearch:ElasticsearchExtract",
            "json_file = extraction_methods.plugins.extraction_methods.json_file:JsonFileExtract",
            "path_parts = extraction_methods.plugins.extraction_methods.path_parts:PathPartsExtract",
            "os_stats = extraction_methods.plugins.extraction_methods.os_stats:OsStatsExtract",
            "boto_stats = extraction_methods.plugins.extraction_methods.boto_stats:BotoStatsExtract",
            "fsspec_stats = extraction_methods.plugins.extraction_methods.fsspec_stats:FsSpecStatsExtract",
            "ceda_vocabulary = extraction_methods.plugins.extraction_methods.ceda_vocabulary:CEDAVocabularyExtract",
            "controlled_vocabulary = extraction_methods.plugins.extraction_methods.controlled_vocabulary:ControlledVocabularyExtract",
            "dot_seperated_str = extraction_methods.plugins.extraction_methods.dot_seperated_str:DotSeperatedStrExtract",
            "hash = extraction_methods.plugins.extraction_methods.hash:HashExtract",
            "basename = extraction_methods.plugins.extraction_methods.basename:BasenameExtract",
            "ceda_observation = extraction_methods.plugins.extraction_methods.ceda_observation:CEDAObservationExtract",
            "iso_date = extraction_methods.plugins.extraction_methods.iso_date:ISODateExtract",
            "facet_map = extraction_methods.plugins.extraction_methods.facet_map:FacetMapExtract",
            "bbox = extraction_methods.plugins.extraction_methods.bbox:BboxExtract",
            "geometry_line = extraction_methods.plugins.extraction_methods.geometry_line:GeometryLineExtract",
            "geometry_point = extraction_methods.plugins.extraction_methods.geometry_point:GeometryPointExtract",
            "geometry_polygon = extraction_methods.plugins.extraction_methods.geometry_polygon:GeometryPolygonExtract",
            "string_join = extraction_methods.plugins.extraction_methods.string_join:StringJoinExtract",
            "string_template = extraction_methods.plugins.extraction_methods.string_template:StringTemplateExtract",
            "date_combinator = extraction_methods.plugins.extraction_methods.date_combinator:DateCombinatorExtract",
            "facet_prefix = extraction_methods.plugins.extraction_methods.facet_prefix:FacetPrefixExtract",
            "remove = extraction_methods.plugins.extraction_methods.remove:RemoveExtract",
        ],
        "extraction_methods.header.backends": [
            "ncml = extraction_methods.plugins.extraction_methods.header.backends.ncml:NcMLBackend",
            "xarray = extraction_methods.plugins.extraction_methods.header.backends.xarray:XarrayBackend",
            "cf = extraction_methods.plugins.extraction_methods.header.backends.cf:CfBackend",
        ],
    },
)
